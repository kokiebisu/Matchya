on:
  workflow_call:
    inputs:
      environment-label:
        required: true
        type: string
      node-environment:
        required: true
        type: string

jobs:
  web:
    name: Web
    if: inputs.node-environment != 'production'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-label }}
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: 18

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Fetch environment variables and create .env in web folder
        run: |
          echo "VITE_API_URL=${{ vars.VITE_API_URL }}" >> web/.env
          echo "VITE_GITHUB_CLIENT_ID=${{ secrets.VITE_GITHUB_CLIENT_ID }}" >> web/.env
          echo "VITE_CLIENT_URL=${{ vars.VITE_CLIENT_URL }}" >> web/.env

      - name: Install dependencies
        run: npm install
        working-directory: web

      - name: Build
        run: npm run build
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_ENVIRONMENT: ${{ inputs.environment-label }}
          NODE_ENV: ${{ inputs.node-environment }}
        working-directory: web

      - name: Deploy to S3
        run: |
          echo "Starting deployment to S3..."
          aws s3 sync dist/ s3://${{ vars.S3_WEBSITE_BUCKET_NAME }}
          echo "Deployment to S3 completed."
        working-directory: web

      - name: Get the distribution id for Cloudfront
        id: get_distribution_id
        run: |
          distribution_id=$(aws ssm get-parameter --name "/terraform/shared/${{ vars.S3_WEBSITE_BUCKET_NAME }}/cloudfront_distribution_id" --query "Parameter.Value" --output text)
          echo "distribution_id=$distribution_id" >> $GITHUB_OUTPUT
          echo "Distribution Id found: $distribution_id"

      - name: Invalidate Cloudfront cache
        run: |
          echo "Starting CloudFront cache invalidation..."
          if ! aws cloudfront create-invalidation --distribution-id ${{ steps.get_distribution_id.outputs.distribution_id }} --paths "/*" > /dev/null 2>&1; then
              echo "CloudFront cache invalidation failed."
              exit 1
          fi
          echo "CloudFront cache invalidation was successful."

on:
  workflow_call:
    inputs:
      environment:
        description: Environment to deploy to in lowercase.
        required: true
        type: string
      environment-label:
        description: Environment to deploy to in capitalized.
        required: true
        type: string

jobs:
  web:
    name: Web
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-label }}
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: 20

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Fetch environment variables and create .env in web folder
        run: |
          echo "VITE_API_URL=${{ vars.VITE_API_URL }}" > web/.env
          echo "VITE_GITHUB_CLIENT_ID=${{ secrets.VITE_GITHUB_CLIENT_ID }}" >> web/.env
          echo "VITE_GOOGLE_CLIENT_ID=${{ secrets.VITE_GOOGLE_CLIENT_ID }}" >> web/.env
          echo "VITE_CLIENT_URL=${{ vars.VITE_CLIENT_URL }}" >> web/.env

      - name: Install Package Dependencies
        run: npm ci
        working-directory: web

      - name: Build
        run: npm run build -- --mode ${{ inputs.environment }}
        env:
          RUDDERSTACK_DATA_PLANE_URL: ${{ secrets.RUDDERSTACK_DATA_PLANE_URL }}
          RUDDERSTACK_WRITE_KEY: ${{ secrets.RUDDERSTACK_WRITE_KEY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_ENVIRONMENT: ${{ inputs.environment }}
          SENTRY_ORG: ${{ vars.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT }}
        working-directory: web

      - name: Fetch App Domain Name
        id: fetch_app_domain_name
        run: |
          echo "Starting fetching App Domain Name..."
          app_domain_name=$(aws ssm get-parameter --name "/terraform/${{ inputs.environment }}/domain_name" --query "Parameter.Value" --output text)
          echo "app_domain_name=$app_domain_name" >> $GITHUB_OUTPUT
          echo "App Domain Name found: $app_domain_name"

      - name: Deploy to S3
        run: |
          echo "Starting deployment to S3..."
          aws s3 sync dist/ s3://${{ steps.fetch_app_domain_name.outputs.app_domain_name }}
          echo "Deployment to S3 completed."
        working-directory: web

      - name: Get the distribution id for Cloudfront
        id: get_distribution_id
        run: |
          distribution_id=$(aws ssm get-parameter --name "/terraform/${{ inputs.environment }}/${{ steps.fetch_app_domain_name.outputs.app_domain_name }}/cloudfront_distribution_id" --query "Parameter.Value" --output text)
          echo "distribution_id=$distribution_id" >> $GITHUB_OUTPUT
          echo "Distribution Id found: $distribution_id"

      - name: Invalidate Cloudfront cache
        run: |
          echo "Starting CloudFront cache invalidation..."
          if ! aws cloudfront create-invalidation --distribution-id ${{ steps.get_distribution_id.outputs.distribution_id }} --paths "/*" > /dev/null 2>&1; then
              echo "CloudFront cache invalidation failed."
              exit 1
          fi
          echo "CloudFront cache invalidation was successful."

service: authorizer

frameworkVersion: "3"

custom: ${file(../shared/serverless.dev.yml):custom}

provider: ${file(../shared/serverless.dev.yml):provider}

functions:
  authorize-cookie:
    name: ${self:provider.stage}-authorize-cookie
    image:
      name: default
      command:
        - authorize_cookie.handler

  authorize-header:
    name: ${self:provider.stage}-authorize-header
    image:
      name: default
      command:
        - authorize_header.handler

resources:
  Parameters:
    RestApiId:
      Type: AWS::SSM::Parameter::Value<String>
      Default: /terraform/${self:provider.stage}/api_gateway/id
  Resources:
    ApiGatewayCookieAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      DependsOn:
        - AuthorizeDashcookieLambdaFunction
      Properties:
        Name: ${self:provider.stage}-cookie-authorizer
        RestApiId:
          Ref: RestApiId
        AuthorizerUri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - "arn:aws:lambda:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":function:${self:provider.stage}-authorize-cookie"
              - "/invocations"
        Type: REQUEST
        IdentitySource: method.request.header.Cookie
    ApiGatewayHeaderAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      DependsOn:
        - AuthorizeDashheaderLambdaFunction
      Properties:
        Name: ${self:provider.stage}-header-authorizer
        RestApiId:
          Ref: RestApiId
        AuthorizerUri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - "arn:aws:lambda:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":function:${self:provider.stage}-authorize-header"
              - "/invocations"
        Type: REQUEST
        IdentitySource: method.request.header.Authorization
    LambdaInvokePermissionForCookieAuthorizer:
      Type: "AWS::Lambda::Permission"
      DependsOn:
        - ApiGatewayCookieAuthorizer
        - AuthorizeDashcookieLambdaFunction
      Properties:
        FunctionName:
          Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:provider.stage}-authorize-cookie
        Action: "lambda:InvokeFunction"
        Principal: "apigateway.amazonaws.com"
        SourceArn:
          Fn::Join:
            - ""
            - - "arn:aws:execute-api:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":"
              - Ref: RestApiId
              - "/*/*"
    LambdaInvokePermissionForHeaderAuthorizer:
      Type: "AWS::Lambda::Permission"
      DependsOn:
        - ApiGatewayHeaderAuthorizer
        - AuthorizeDashheaderLambdaFunction
      Properties:
        FunctionName:
          Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:provider.stage}-authorize-header
        Action: "lambda:InvokeFunction"
        Principal: "apigateway.amazonaws.com"
        SourceArn:
          Fn::Join:
            - ""
            - - "arn:aws:execute-api:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":"
              - Ref: RestApiId
              - "/*/*"
  Outputs:
    CookieAuthorizerId:
      Value:
        Ref: ApiGatewayCookieAuthorizer
      Export:
        Name: sls-cookie-authorizer-${self:provider.stage}-AuthorizerId
    HeaderAuthorizerId:
      Value:
        Ref: ApiGatewayHeaderAuthorizer
      Export:
        Name: sls-header-authorizer-${self:provider.stage}-AuthorizerId

plugins:
  - serverless-deployment-bucket

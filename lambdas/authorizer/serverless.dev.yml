service: authorizer

frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.9
  architecture: arm64
  stage: dev
  region: us-east-1
  stackName: ${self:provider.stage}-sls-${self:service}
  apiGateway:
    restApiId: ${ssm:/terraform/${self:provider.stage}/api_gateway/id}
    restApiRootResourceId: ${ssm:/terraform/${self:provider.stage}/api_gateway/root_resource_id}
  deploymentBucket:
    name: ${self:provider.stage}-sls-authorizer
  iam:
    role: ${ssm:/terraform/shared/iam/lambda_role_arn}
  ecr:
    images:
      default:
        path: ./
        file: Dockerfile
        buildArgs:
  environment:
    ENVIRONMENT: ${self:provider.stage}
    JWT_SECRET_KEY: ${ssm:/secrets/${self:provider.stage}/jwt_secret_key}
    POSTGRES_HOST: ${ssm:/terraform/${self:provider.stage}/rds/endpoint}
    POSTGRES_PORT: ${ssm:/terraform/${self:provider.stage}/rds/port}
    POSTGRES_DB: ${ssm:/terraform/${self:provider.stage}/rds/db_name}
    POSTGRES_USER: ${ssm:/terraform/${self:provider.stage}/rds/db_username}
    POSTGRES_PASSWORD: ${ssm:/terraform/${self:provider.stage}/rds/db_password}

functions:
  authorizer:
    name: ${self:provider.stage}-authorizer
    image:
      name: default
      command:
        - authorize.handler

resources:
  Parameters:
    RestApiId:
      Type: AWS::SSM::Parameter::Value<String>
      Default: /terraform/${self:provider.stage}/api_gateway/id
  Resources:
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      DependsOn:
        - AuthorizerLambdaFunction
      Properties:
        Name: ${self:provider.stage}-authorizer
        RestApiId:
          Ref: RestApiId
        AuthorizerUri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - "arn:aws:lambda:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":function:${self:provider.stage}-authorizer"
              - "/invocations"
        Type: REQUEST
        IdentitySource: method.request.header.Cookie
    LambdaInvokePermissionForAuthorizer:
      Type: "AWS::Lambda::Permission"
      DependsOn:
        - ApiGatewayAuthorizer
        - AuthorizerLambdaFunction
      Properties:
        FunctionName:
          Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:provider.stage}-authorizer
        Action: "lambda:InvokeFunction"
        Principal: "apigateway.amazonaws.com"
        SourceArn:
          Fn::Join:
            - ""
            - - "arn:aws:execute-api:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":"
              - Ref: RestApiId
              - "/*/*"
  Outputs:
    AuthorizerId:
      Value:
        Ref: ApiGatewayAuthorizer
      Export:
        Name: sls-authorizer-${self:provider.stage}-AuthorizerId

plugins:
  - serverless-deployment-bucket

service: interview

frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.9
  architecture: arm64
  stage: ${opt:stage, 'staging'}
  region: us-east-1
  stackName: ${self:provider.stage}-sls-${self:service}
  deploymentBucket:
    name: ${self:provider.stage}-sls-interview
  vpc:
    securityGroupIds:
      - ${ssm:/terraform/${self:provider.stage}/vpc/security_group_id/lambda}
    subnetIds:
      - ${ssm:/terraform/${self:provider.stage}/vpc/subnet_id/private_1}
      - ${ssm:/terraform/${self:provider.stage}/vpc/subnet_id/private_2}
  iam:
    role: ${ssm:/terraform/shared/iam/lambda_role_arn}
  apiGateway:
    restApiId: ${ssm:/terraform/${self:provider.stage}/api_gateway/id}
    restApiRootResourceId: ${ssm:/terraform/${self:provider.stage}/api_gateway/root_resource_id}
  ecr:
    images:
      default:
        path: ./
        file: Dockerfile
        buildArgs:
  environment:
    ENVIRONMENT: ${self:provider.stage}
    OPENAI_API_KEY: ${ssm:/secrets/${self:provider.stage}/openai_api_key}
    POSTGRES_HOST: ${ssm:/terraform/${self:provider.stage}/rds/endpoint}
    POSTGRES_PORT: ${ssm:/terraform/${self:provider.stage}/rds/port}
    POSTGRES_DB: ${ssm:/terraform/${self:provider.stage}/rds/db_name}
    POSTGRES_USER: ${ssm:/terraform/${self:provider.stage}/rds/db_username}
    POSTGRES_PASSWORD: ${ssm:/terraform/${self:provider.stage}/rds/db_password}
    QUESTION_GENERATION_PROCESSOR_QUEUE_URL: ${ssm:/terraform/${self:provider.stage}/sqs/question_generation_processor_queue_url}
    SENTRY_DSN: ${ssm:/secrets/${self:provider.stage}/sentry_dsn/${self:service}}
    SERVICE_NAME: ${self:service}

functions:
  evaluate-question:
    name: ${self:provider.stage}-interview-evaluate-question
    image:
      name: default
      command:
        - evaluate_question.handler
    events:
      - s3:
          bucket: ${self:provider.stage}-data-question-response-video
          event: s3:ObjectCreated:*
          existing: true
    timeout: 300

  evaluate-interview:
    name: ${self:provider.stage}-interview-evaluate-interview
    image:
      name: default
      command:
        - evaluate_interview.handler
    events:
      - http:
          path: /interviews/{id}
          method: POST
          cors:
            origins:
              - "https://${ssm:/terraform/staging/domain_name}"
              - "https://www.${ssm:/terraform/staging/domain_name}"
            allowCredentials: true
          request:
            parameters:
              paths:
                id: true
    timeout: 30

  retrieve:
    name: ${self:provider.stage}-interview-retrieve
    image:
      name: default
      command:
        - retrieve.handler
    events:
      - http:
          path: /interviews
          method: GET
          cors:
            origins:
              - "https://${ssm:/terraform/staging/domain_name}"
              - "https://www.${ssm:/terraform/staging/domain_name}"
            allowCredentials: true
          authorizer:
            authorizerId: ${cf:${self:provider.stage}-sls-authorizer.CookieAuthorizerId}
            type: REQUEST
    timeout: 30

  retrieve-questions-by-id:
    name: ${self:provider.stage}-interview-retrieve-questions-by-id
    image:
      name: default
      command:
        - retrieve_questions_by_id.handler
    events:
      - http:
          path: /interviews/{id}/questions
          method: GET
          cors:
            origins:
              - "https://${ssm:/terraform/staging/domain_name}"
              - "https://www.${ssm:/terraform/staging/domain_name}"
            allowCredentials: true
          request:
            parameters:
              paths:
                id: true

  retrieve-results-by-id:
    name: ${self:provider.stage}-interview-retrieve-results-by-id
    image:
      name: default
      command:
        - retrieve_results_by_id.handler
    events:
      - http:
          path: /interviews/{id}/results
          method: GET
          cors:
            origins:
              - "https://${ssm:/terraform/staging/domain_name}"
              - "https://www.${ssm:/terraform/staging/domain_name}"
            allowCredentials: true
          authorizer:
            authorizerId: ${cf:${self:provider.stage}-sls-authorizer.CookieAuthorizerId}
            type: REQUEST
          request:
            parameters:
              paths:
                id: true

plugins:
  - serverless-deployment-bucket

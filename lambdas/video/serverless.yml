service: video

frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.9
  architecture: arm64
  stage: ${opt:stage, 'staging'}
  region: us-east-1
  stackName: ${self:provider.stage}-sls-${self:service}
  deploymentBucket:
    name: ${self:provider.stage}-sls-${self:service}
  vpc:
    securityGroupIds:
      - ${ssm:/terraform/${self:provider.stage}/vpc/security_group_id/lambda}
    subnetIds:
      - ${ssm:/terraform/${self:provider.stage}/vpc/subnet_id/private_1}
      - ${ssm:/terraform/${self:provider.stage}/vpc/subnet_id/private_2}
  iam:
    role: ${ssm:/terraform/shared/iam/lambda_role_arn}
  apiGateway:
    restApiId: ${ssm:/terraform/${self:provider.stage}/api_gateway/id}
    restApiRootResourceId: ${ssm:/terraform/${self:provider.stage}/api_gateway/root_resource_id}
  ecr:
    images:
      default:
        path: ./
        file: Dockerfile
        buildArgs:
  environment:
    ENVIRONMENT: ${self:provider.stage}
    SENTRY_DSN: ${ssm:/secrets/${self:provider.stage}/sentry_dsn/${self:service}}

functions:
  get-presigned-url:
    name: ${self:provider.stage}-${self:service}-get-presigned-url
    image:
      name: default
      command:
        - get_presigned_url.handler
    events:
      - http:
          path: /videos/presigned-url
          method: GET
          cors:
            origins:
              - "https://${ssm:/terraform/staging/domain_name}"
              - "https://www.${ssm:/terraform/staging/domain_name}"
            allowCredentials: true
          # authorizer:
          #   authorizerId: ${cf:${self:provider.stage}-sls-authorizer.AuthorizerId}
          #   type: REQUEST
    timeout: 30

plugins:
  - serverless-deployment-bucket
